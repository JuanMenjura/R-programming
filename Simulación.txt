Selection: 13

  |                                                                                                    |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of
| tools for simulating random numbers.

...

  |===                                                                                                 |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be
| discussed with respect to random number generation. Even if you have no prior experience with these
| concepts, you should be able to complete the lesson and understand the main ideas.

...

  |======                                                                                              |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the
| documentation.

> ?sample

| You are quite good my friend!

  |=========                                                                                           |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1: 6, 4, replace = TRUE)
[1] 6 1 3 5

| That's correct!

  |============                                                                                        |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is
| (1/6)^4 = 0.00077, which is pretty small!)

> sample(1: 6, 4, replace = TRUE)
[1] 6 4 1 4

| That's the answer I was looking for.

  |===============                                                                                     |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH
| replacement. Sampling with replacement simply means that each number is "replaced" after it is selected, so
| that the same number can show up more than once. This is what we want here, since what you roll on one die
| shouldn't affect what you roll on any of the others.

...

  |==================                                                                                  |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave
| off the 'replace' argument.

> sample(1:20, 10)
 [1]  9  3 10 15 13 19  2 12  7  8

| Excellent job!

  |=====================                                                                               |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |========================                                                                            |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a
| look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| That's correct!

  |===========================                                                                         |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try
| sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "A" "E" "I" "G" "D" "N" "F" "C" "J" "L" "S" "P" "B" "T" "U" "O" "W" "Y" "M" "K" "Q" "H" "X" "R" "Z" "V"

| You are quite good my friend!

  |==============================                                                                      |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument
| to sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.

...

  |=================================                                                                   |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3
| probability of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |====================================                                                                |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100
| from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities
| to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a
| new variable called flips.

> flips <- sample(1:100, c(0, 1), prob = c(0.3, 0.7))
Error in sample.int(length(x), size, replace, prob) : 
  número de probabilidades incorrecto
> flips <- sample(1:100, c(0, 1), prob = c(0.3, 0.7))
Error in sample.int(length(x), size, replace, prob) : 
  número de probabilidades incorrecto
> flips <- sample(1:100 c(0, 1), prob = c(0.3, 0.7))
Error: unexpected symbol in "flips <- sample(1:100 c"
> flips <- sample(1:100, c(0, 1), prob = c(0.3, 0.7))
Error in sample.int(length(x), size, replace, prob) : 
  número de probabilidades incorrecto
> flips <- sample(c(0, 1), 1:100, prob = c(0.3, 0.7))

| Keep trying! Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <-
| sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))

| Excellent work!

  |=======================================                                                             |  39%
| View the contents of the flips variable.

> flips   
  [1] 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1
 [53] 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 0

| Excellent job!

  |==========================================                                                          |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of
| our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum()
| function.

> sum(flips)
[1] 72

| You got it!

  |=============================================                                                       |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we
| can use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using
| ?rbinom.

> ?rbinom

| You nailed it! Good job!

  |================================================                                                    |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a
| p*** (for "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in this
| lesson, but I encourage you to explore the others on your own.

...

  |====================================================                                                |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent
| 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of
| heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify
| the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 67

| Perseverance, that's the answer.

  |=======================================================                                             |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with
| success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(1, size = 100, prob = 0.7)

| One more time. You can do it! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(100, size = 1, prob = 0.7)

| Great job!

  |==========================================================                                          |  58%
| View the contents of flips2.

> flips2
  [1] 0 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 0
 [53] 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 0 0 1 1 1 1 0 1 0 1 1 0

| Keep working like that and you'll get there!

  |=============================================================                                       |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 69

| Excellent job!

  |================================================================                                    |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions.
| Pull up the documentation for rnorm() now.

> rnorm()
Error in rnorm() : el argumento "n" está ausente, sin valor por omisión
> ?rnorm

| Keep up the great work!

  |===================================================================                                 |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage'
| section in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1,
| respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it
| a try.

> rnorm(10)
 [1]  0.01193122  1.75479581 -1.31960601  2.03153136 -0.70735479 -0.94541956 -0.14537544 -0.21694585
 [9]  1.88043184  1.20239775

| You are quite good my friend!

  |======================================================================                              |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 117.08292  97.32552  79.58017 100.32797 101.71405 104.28420  92.15876 141.25350  78.23603  76.20639

| You're the best!

  |=========================================================================                           |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated
| from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how
| to repeat the operation 100 times in a convenient and compact way.

...

  |============================================================================                        |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois()
| if you need help.

> rpois(5, mean = 10)
Error in rpois(5, mean = 10) : unused argument (mean = 10)
> ?rpois
> rpois(5, 10)
[1] 14  7 16  7  9

| You're the best!

  |===============================================================================                     |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new
| variable called my_pois.

> replicate(100, rpois(5, 10))
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19]
[1,]   11    6   14    7   13   11    9    7    9    14     9     9     7    14     3    15    10    11    14
[2,]    6   14   11    9   10   14   13   11   12     8    11    10     8     8     9    10    12    10     5
[3,]    9    8   16    7   11    8   10    8   10     9    15    12     9    13    10     7     7     6    12
[4,]   13   10   13   12   13    8   14   14    5    13     5     9    13    10    16     8     8    14    12
[5,]   12   16   13    5   10    8    7   12   12    12     8    20    10    10    14     7    11    12    16
     [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36]
[1,]     9    10     7     9    13    10    10     9    13    12    12    10     9     8     9     9     7
[2,]     4     9     8    13     5    14     8     7    12     9    11    13     9     7     9     8     7
[3,]     6    12    15     8     8     7    14    12    13     8    11     6    12    15     9    13     6
[4,]    15    10     9    12     6    13    10    16     8    10    10    12    10     9    14    10     9
[5,]     6    10    11    14     4     8     5    16     6     7    13    16    10    12    12    10    15
     [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53]
[1,]    14     8    14    13    11     6    13     7    16     8     6    14    10    11     8    11    15
[2,]     7     8    13    12     8     9    10    10    17    14    12    11    13     6    10     8     5
[3,]     9     9     7    12     7     6    16    11    17     8    12     6    13    16     8    12    10
[4,]     8    13    10    10     9     9     4    16    13     9    11    10     9    14    14     8    14
[5,]    11    15     7    11     9    11    11    11     9     6    13     8    10    14     7    12    10
     [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70]
[1,]     6    10     9     8    10    12     8     9     8    14     7    13     5     5    10     9    13
[2,]    13    11    12    14    14     6    12    12    14     9    11    10    12    13     7     5    14
[3,]    16    12    14     9    13    10     8     9     9     8    10     7     7    15     7     9     8
[4,]    11     7    13     8     9    10    10     6    10    11     4    11     7     4    11    11    12
[5,]     7    10     9     9    13     8    12     8    11    12     7    11     7     7    11    16     9
     [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87]
[1,]     5    12    10     9    17    10    11    14    11    15     5     9     5    14     7    11    14
[2,]     8    15     5     7    10    10    11     7     5    15     3    15     9    14    15    12    17
[3,]    11     7    13    10    11     7    11    11    15     8    16    11     7     9     6     9    13
[4,]    11     8    17     3    12    11    12     9    13     6     9     7     5     7    14    12     3
[5,]     8    12    11     5     4     7    13    17    15    11    13     7     9     4    13    14    18
     [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     7     8    10    10     9    12     6     8    13    11    13    11      9
[2,]    13    17     9    11    11    11    13     5     7     3     7    12     13
[3,]    11     6    10    13     6     6    11     9     6    13    15     9     13
[4,]    11    11     7     8    11    11    13     6     6     6     6     9      7
[5,]    12    10     8    10    11    14     9    13    13    11    11    18     10

| Keep trying! Or, type info() for more options.

| my_pois <- replicate(100, rpois(5, 10)) will repeat the operation 100 times and store the result.

> my_pois <- replicate(100, rpois(5, 10))

| You are amazing!

  |==================================================================================                  |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19]
[1,]    7   17    9   12    7   16    7   10    8    11     3     8    14     8     4    11    11     8     9
[2,]    9   13   13    8   12    6   15    9    6     8    12     5     9    11     9    10    14    14    11
[3,]   12   11    6   12   16    7   12    8    7    13     3    13    11    13     8     9     8    14     8
[4,]   10   13    8   14    5    8   11    8   10     9     7    12    13    10    11    14     9     7     3
[5,]   16   11   11    7   14   10    9   11   11     7    10    12    13     9     7    12    15     7    10
     [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36]
[1,]     7    14    13    13     8    16    10     6    10    10     8    11    10    18     9     5     9
[2,]     9    10     7     5     9     8     8    10    12    10    11     8    11    12     5    14    11
[3,]    12    13    15    14    13    15     8    16     6    11    11    12     9    10     4     6     8
[4,]    11    16     9    11    10    10    11     8     9    13    15    11    11    17    10     8     9
[5,]    10    13     9     9     5    16    15     9    11    10    12     7    14    11    11    13    10
     [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53]
[1,]    10     8     9     9     8    14    10     8     8     4    12    10    16    13     6     5     8
[2,]     6     9     7    12     6    16     9    14     9     9    10    11    16     7    11     9     3
[3,]     8    16    11    14     7    12    11     5     8    10     7    10     9    13    13    13    14
[4,]    11     7    13    10     7    13    12     5     8    10     4     9    10     4    14    13     9
[5,]     4    10     9    12    19     7    13     8    11     7     8    13     9     8     9    19     8
     [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70]
[1,]     9    10    13     9     8     8     8     9    11    10    18     7    11     5     9    10    14
[2,]     9     5     5    11     7    11     8     9    13     8     9     8    11    13    11    12    12
[3,]    12    10    11    12    10    11    13     4    10     9    13    14    15     5    15    15    13
[4,]     9     6    10     7    12    10    11    12    14     9    11    14    13     8    13     9    10
[5,]     8    14     8     7     7    12     6     9    10    11     9     6    13    14     4    10    11
     [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87]
[1,]     4     9     9    10    15    11    10    14    10     6     6     9    11     8    10    12    11
[2,]    13     5     7    17    11    12     4     4    12     9    12     9    11    12    10    16    10
[3,]     6     8     7    11     9    15     5    14     5     9    10     9     9     7     8    10    10
[4,]    12     9     7    11    13    13    11    14     8    10     9     7    14     9     9    12    14
[5,]    12     9     8     8     8     9     5     9    10    11     7    11     8     6    10    14     8
     [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     7    16    10    11     8     8     6     9     4     5     6    10     11
[2,]     9     6    14    10     6     7    10     8     8    12     9    17     12
[3,]     6    17     5     3    11    14    10    15    16    13    15     3     12
[4,]    14     9    11    13    10     8    13     8    12    12     9    13      8
[5,]     6    11     9     9    12     6     8    12    11     8     6     7      8

| That's a job well done!

  |=====================================================================================               |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson
| distribution with mean 10. Now we can find the mean of each column in my_pois using the colMeans()
| function. Store the result in a variable called cm.

> cm <- colMeans(my_pois)

| You got it right!

  |========================================================================================            |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| You nailed it! Good job!

  |===========================================================================================         |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at
| work, but that's a lesson for another day!

...

  |==============================================================================================      |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared
| (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |=================================================================================================   |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I
| encourage you to explore these and other functions further on your own.

...

  |====================================================================================================| 100%