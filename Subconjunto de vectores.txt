El | El | 0%

El | En esta lección, veremos cómo extraer elementos de un vector en función de algunas condiciones que
El | especificar.

...

  | == | 3%
El | Por ejemplo, es posible que solo nos interesen los primeros 20 elementos de un vector, o solo los elementos que son
El | no NA, o solo aquellos que son positivos o corresponden a una variable específica de interés. Al final de
El | En esta lección, sabrá cómo manejar cada uno de estos escenarios.

...

  | ===== | 5%
El | He creado para usted un vector llamado x que contiene un orden aleatorio de 20 números (de un estándar
El | distribución normal) y 20 NA. Escriba x ahora para ver cómo se ve.

> x
 [1] NA -0.65504438 NA -1.46533450 NA NA 1.28770632 -1.15073472
 [9] NA 0,08134732 0,90535142 -1,53548607 0,15408472 0,18642291 0,27701904 NA
[17] NA NA NA NA NA 0.35218016 0.77522760 NA
[25] 0.35118451 NA -0.49447546 NA NA NA NA 0.25856423
[33] -0.64795597 NA 0.07091432 -0.59482542 1.89100781 NA NA -1.70546241

El | ¡Mantener el buen trabajo!

  | ======= | 8%
El | La forma en que le dice a R que desea seleccionar algunos elementos particulares (es decir, un "subconjunto") de un vector es mediante
El | colocando un 'vector índice' entre corchetes inmediatamente después del nombre del vector.

...

  | ========= | 10%
El | Para un ejemplo simple, intente x [1:10] para ver los primeros diez elementos de x.

> x [1:10]
 [1] NA -0.65504438 NA -1.46533450 NA NA 1.28770632 -1.15073472
 [9] NA 0,08134732

El | ¡Excelente trabajo!

  | =========== | 13%
El | Los vectores de índice vienen en cuatro sabores diferentes: vectores lógicos, vectores de enteros positivos, vectores de
El | enteros negativos y vectores de cadenas de caracteres, cada uno de los cuales cubriremos en esta lección.

...

  | ============== | 15%
El | Comencemos indexando con vectores lógicos. Un escenario común cuando se trabaja con datos del mundo real es que
El | queremos extraer todos los elementos de un vector que no sean NA (es decir, datos faltantes). Recordemos que es.na (x)
El | produce un vector de valores lógicos de la misma longitud que x, con TRUE correspondientes a los valores de NA en x y
El | FALSEs correspondientes a valores no NA en x.

...

  | ================ | 18%
El | ¿Qué crees que x [is.na (x)] te dará?

1: Un vector de VERDADEROS y FALSES
2: un vector de todas las NA
3: un vector sin NA
4: un vector de longitud 0

Selección: 2

El | ¡Lo lograste! ¡Buen trabajo!

  | ================== | 21%
El | Pruébelo usted mismo escribiendo x [is.na (x)].

> x [es.na (x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

El | Esa es la respuesta que estaba buscando.

  | ===================== | 23%
El | Recuerde que `!` Nos da la negación de una expresión lógica, por lo que! Is.na (x) se puede leer como 'no es NA'.
El | Por lo tanto, si queremos crear un vector llamado y que contenga todos los valores que no sean NA de x, podemos usar
El | y <- x [! is.na (x)]. Darle una oportunidad.

> y z- x [! is.na (x)]
Error: símbolo inesperado en "y z"
> y <- x [! is.na (x)]

El | ¡Todo ese trabajo duro está dando sus frutos!

  | ======================= | 26%
El | Imprima y en la consola.

> y
 [1] -0.65504438 -1.46533450 1.28770632 -1.15073472 0.08134732 0.90535142 -1.53548607 0.15408472
 [9] 0.18642291 0.27701904 0.35218016 0.77522760 0.35118451 -0.49447546 0.25856423 -0.64795597
[17] 0.07091432 -0.59482542 1.89100781 -1.70546241

El | ¡Lo tienes!

  | ========================= | 28%
El | Ahora que hemos aislado los valores no perdidos de x y los hemos puesto en y, podemos subconjuntar y como nos plazca.

...

  | =========================== | 31%
El | Recuerde que la expresión y> 0 nos dará un vector de valores lógicos de la misma longitud que y, con VERDADEROS
El | correspondientes a valores de y que son mayores que cero y FALSE correspondientes a valores de y que son
El | menor o igual a cero. ¿Qué crees que y [y> 0] te dará?

1: un vector de longitud 0
2: un vector de todos los elementos positivos de y
3: Un vector de VERDADEROS y FALSES
4: un vector de todos los elementos negativos de y
5: un vector de todas las NA

Selección: 2

El | Perseverancia, esa es la respuesta.

  | ============================== | 33%
El | Escriba y [y> 0] para ver que obtenemos todos los elementos positivos de y, que también son elementos positivos de
El | nuestro vector original x.

> y [y> 0]
 [1] 1.28770632 0.08134732 0.90535142 0.15408472 0.18642291 0.27701904 0.35218016 0.77522760 0.35118451
[10] 0.25856423 0.07091432 1.89100781

El | Perseverancia, esa es la respuesta.

  | ================================ | 36%
El | Quizás se pregunte por qué no comenzamos simplemente con x [x> 0] para aislar los elementos positivos de x. Intenta eso ahora
El | para ver por qué

> x> 0
 [1] NA FALSO NA FALSO NA NA VERDADERO FALSO NA VERDADERO FALSO VERDADERO VERDADERO VERDADERO NA NA
[18] NA NA NA NA VERDADERO VERDADERO NA VERDADERO NA FALSO NA NA NA NA VERDADERO FALSO NA
[35] VERDADERO FALSO VERDADERO NA NA FALSO

El | Buen intento, pero eso no es exactamente lo que esperaba. Inténtalo de nuevo. O escriba info () para más opciones.

El | Pruebe x [x> 0] para ver por qué no usamos este enfoque.

> x [x> 0]
 [1] NA NA NA NA 1.28770632 NA 0.08134732 0.90535142 0.15408472
[10] 0.18642291 0.27701904 NA NA NA NA NA NA 0.35218016
[19] 0.77522760 NA 0.35118451 NA NA NA NA NA 0.25856423
[28] NA 0,07091432 1,89100781 NA NA

El | Perseverancia, esa es la respuesta.

  | ================================== | 38%
El | Como NA no es un valor, sino un marcador de posición para una cantidad desconocida, la expresión NA> 0 evalúa
El | a NA. Por lo tanto, tenemos un montón de NA mezclados con nuestros números positivos cuando hacemos esto.

...

  | ===================================== | 41%
El | Combinando nuestro conocimiento de operadores lógicos con nuestro nuevo conocimiento de subconjuntos, podríamos hacer esto:
El | x [! is.na (x) & x> 0]. Pruébalo.

> x [! is.na (x) & x> 0]
 [1] 1.28770632 0.08134732 0.90535142 0.15408472 0.18642291 0.27701904 0.35218016 0.77522760 0.35118451
[10] 0.25856423 0.07091432 1.89100781

El | ¡Buen trabajo!

  | ======================================= | 44%
El | En este caso, solicitamos solo valores de x que no faltan Y son mayores que cero.

...

  | ========================================= | 46%
El | Ya te he mostrado cómo subconjuntar solo los primeros diez valores de x usando x [1:10]. En este caso, estamos
El | proporcionando un vector de enteros positivos dentro de los corchetes, que le dice a R que devuelva solo el
El | elementos de x numerados del 1 al 10.

...

  | =========================================== | 49%
El | Muchos lenguajes de programación usan lo que se llama 'indexación basada en cero', lo que significa que el primer elemento de un
El | el vector se considera elemento 0. R usa 'indexación basada en uno', que (¡lo adivinó!) significa el primero
El | El elemento de un vector se considera elemento 1.

...

  | ============================================== | 51%
El | ¿Puedes imaginar cómo subconjuntos los elementos tercero, quinto y séptimo de x? Sugerencia: use la función c () para
El | especifique los números de elementos como un vector numérico.

> x [c (3, 5, 7)]
[1] NA NA 1.287706

El | ¡Gran trabajo!

  | ================================================ | 54%
El | Es importante que cuando usemos vectores enteros para subconjuntar nuestro vector x, nos atenemos al conjunto de índices {1,
El | 2, ..., 40} ya que x solo tiene 40 elementos. ¿Qué sucede si preguntamos por el elemento cero de x (es decir, x [0])?
El | Darle una oportunidad.

> x [0]
numérico (0)

El | ¡Excelente trabajo!

  | ================================================= = | 56%
El | Como es de esperar, no obtenemos nada útil. Desafortunadamente, R no nos impide hacer esto. Y si nos
El | preguntar por el elemento 3000 de x? Pruébalo.

> x [3000]
[1] NA

El | ¡Mantener el buen trabajo!

  | ================================================= === | 59%
El | Nuevamente, nada útil, pero R no nos impide pedirlo. Esto debería ser una historia de advertencia. Tú
El | siempre debe asegurarse de que lo que está pidiendo esté dentro de los límites del vector con el que está trabajando.

...

  | ================================================= ====== | 62%
El | ¿Qué pasa si estamos interesados ​​en todos los elementos de x EXCEPTO el 2º y 10º? Sería bastante tedioso
El | construya un vector que contenga todos los números del 1 al 40, EXCEPTO 2 y 10.

...

  | ================================================= ======== | 64%
El | Afortunadamente, R acepta índices enteros negativos. Mientras que x [c (2, 10)] nos da SOLO los elementos segundo y décimo de
El | x, x [c (-2, -10)] nos da todos los elementos de x EXCEPTO para el segundo y 10 elementos. Pruebe x [c (-2, -10)] ahora para ver
El | esta.

> x [c (-2, -10)]
 [1] NA NA -1.46533450 NA NA 1.28770632 -1.15073472 NA 0.90535142
[10] -1.53548607 0.15408472 0.18642291 0.27701904 NA NA NA NA NA
[19] NA 0,35218016 0,77522760 NA 0,35118451 NA -0,49447546 NA NA
[28] NA NA 0.25856423 -0.64795597 NA 0.07091432 -0.59482542 1.89100781 NA
[37] NA-1,70546241

El | Lo entendiste bien!

  | ================================================= ========== | 67%
El | Una forma abreviada de especificar múltiples números negativos es colocar el signo negativo delante del
El | Vector de números positivos. Escriba x [-c (2, 10)] para obtener exactamente el mismo resultado.

> x [-c (2, 10)]
 [1] NA NA -1.46533450 NA NA 1.28770632 -1.15073472 NA 0.90535142
[10] -1.53548607 0.15408472 0.18642291 0.27701904 NA NA NA NA NA
[19] NA 0,35218016 0,77522760 NA 0,35118451 NA -0,49447546 NA NA
[28] NA NA 0.25856423 -0.64795597 NA 0.07091432 -0.59482542 1.89100781 NA
[37] NA-1,70546241

El | ¡Todo ese trabajo duro está dando sus frutos!

  | ================================================= ============= | 69%
El | Hasta ahora, hemos cubierto tres tipos de vectores de índice: lógico, entero positivo y entero negativo. los
El | El único tipo restante requiere que introduzcamos el concepto de elementos 'nombrados'.

...

  | ================================================= =============== | 72%
El | Cree un vector numérico con tres elementos con nombre usando vect <- c (foo = 11, bar = 2, norf = NA).

> vect <- c (foo = 11, bar = 2, norf = NA)

El | ¡Excelente trabajo!

  | ================================================= ================= | 74%
El | Cuando imprimamos Vect en la consola, verá que cada elemento tiene un nombre. Pruébalo.

> vect
 foo bar norf 
  11 2 NA 

El | ¡Tu dedicación es inspiradora!

  | ================================================= =================== | 77%
El | También podemos obtener los nombres de vect pasando vect como argumento a la función names (). Pruébalo

> nombres (vect)
[1] "foo" "bar" "norf"

El | ¡Toda esa práctica está dando sus frutos!

  | ================================================= ====================== | 79%
El | Alternativamente, podemos crear un vector sin nombre vect2 con c (11, 2, NA). Haz eso ahora.

> vect2 <- c (11, 2, NA)

El | ¡Gran trabajo!

  | ================================================= ======================== | 82%
El | Luego, podemos agregar el atributo `names` a vect2 después del hecho con los nombres (vect2) <- c (" foo "," bar "," norf ").
El | Adelante.

> nombres (vect2) <- c ("foo", "bar", "norf")

El | ¡Mantener el buen trabajo!

  | ================================================= ========================== | 85%
El | Ahora, verifiquemos que vect y vect2 son iguales pasándolos como argumentos a la función idéntica ().

> idéntico (vect, vect2)
[1] VERDADERO

El | ¡Estás realmente en racha!

  | ================================================= ============================= | 87%
El | De hecho, vect y vect2 son vectores con nombre idénticos.

...

  | ================================================= =============================== | 90%
El | Ahora, volvamos a la cuestión de subconjunto de un vector por elementos con nombre. ¿Cuál de los siguientes comandos haces?
El | pensar nos daría el segundo elemento de vect?

1: vect [bar]
2: vect ["barra"]
3: vect ["2"]

Selección: 1

El | No del todo bien, pero sigue intentándolo.

El | Si queremos el elemento llamado "barra" (es decir, el segundo elemento de vect), ¿qué comando nos daría eso?

1: vect ["2"]
2: vect ["barra"]
3: vect [bar]

Selección: 1

El | ¡Casi! Inténtalo de nuevo.

El | Si queremos el elemento llamado "barra" (es decir, el segundo elemento de vect), ¿qué comando nos daría eso?

1: vect ["bar"]
2: vect ["2"]
3: vect [bar]

Selección: 1

El | ¡Eres fabuloso!

  | ================================================= ================================= | 92%
El | Ahora, pruébalo.

> vect ["bar"]
bar 
  2 

El | ¡Eres fabuloso!

  | ================================================= =================================== | 95%
El | Del mismo modo, podemos especificar un vector de nombres con vect [c ("foo", "bar")]. Pruébalo.

> vect [c ("foo", "bar")]
foo bar 
 11 2 

El | ¡Buen trabajo!

  | ================================================= ====================================== | 97%
El | Ahora conoce los cuatro métodos de subconjunto de datos de vectores. Diferentes enfoques son mejores en diferentes
El | escenarios y en caso de duda, ¡pruébalo!

...

  | ================================================= ======================================== | 100%